package com.seat_booking_sites;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Scanner;

import com.seat_booking_customers.Customer;
import com.seat_booking_customers.Customerdetails;

public class AirLinesBooking implements Runnable,Customerdetails {
	Customer cust;//customer module
	ArrayList<AirLinesBooking> a=new ArrayList<AirLinesBooking>();
	ArrayList<Customer> cus=new ArrayList<Customer>();
	public AirLinesBooking() {//AirlinesBooking constructor
		super();
	}
	@Override
	public String toString() {//to string methods
		return "AirLinesBooking [cust=" + cust + ", cus=" + cus + ", plane_name=" + plane_name + ", to=" + to
				+ ", from=" + from + ", arrival_time=" + arrival_time + ", departure_time=" + departure_time
				+ ", ticket_price=" + ticket_price + "]";
	}
	public String plane_name;
	public String to;
	public String from;
	public String arrival_time;
	public String departure_time;
	public double ticket_price;
	
	public AirLinesBooking(String plane_name, String to, String from, String arrival_time, String departure_time,
			double ticket_price) {//airlinesbooking argument constructor
		super();
		this.plane_name = plane_name;
		this.to = to;
		this.from = from;
		this.arrival_time = arrival_time;
		this.departure_time = departure_time;
		this.ticket_price = ticket_price;
	}
	public String getPlane_name() {
		return plane_name;
	}
	public void setPlane_name(String plane_name) {
		this.plane_name = plane_name;
	}
	public String getTo() {
		return to;
	}
	public void setTo(String to) {
		this.to = to;
	}
	public String getFrom() {
		return from;
	}
	public void setFrom(String from) {
		this.from = from;
	}
	public String getArrival_time() {
		return arrival_time;
	}
	public void setArrival_time(String arrival_time) {
		this.arrival_time = arrival_time;
	}
	public String getDeparture_time() {
		return departure_time;
	}
	public void setDeparture_time(String departure_time) {
		this.departure_time = departure_time;
	}
	public double getTicket_price() {
		return ticket_price;
	}
	public void setTicket_price(double ticket_price) {
		this.ticket_price = ticket_price;
	}
	void flights_details_display() {//flight details retrive using for loop
		for(int i=0;i<a.size();i++) {
			System.out.println(""+a.get(i));
		}
		
	}
	void flights_details() {//predifened flight details
		a.add(new AirLinesBooking("airjet","Hyd","delhi","18:00","03:00",5000));
		a.add(new AirLinesBooking("Kingfisher","Hyd","mumbai","14:00","20:00",15000));
		a.add(new AirLinesBooking("UAE Airlines","Hyd","dubai","11:00","15:00",20000));
		a.add(new AirLinesBooking("United AirLines","Hyd","Us","20:00","09:00",26000));
		a.add(new AirLinesBooking("airjet","Hyd","chennai","18:00","1:00",9000));
	}
	public synchronized void getDetials() {//enter flight and customer travel detalis
		flights_details();
		flights_details_display();
		String passport_number;
		String arrival_date;
		String to;
		String from;
		int total_passenger;
		int total_seats=50;
		double total_amount;
		Scanner sc=new Scanner(System.in);
		System.out.println("toatal sets available :"+total_seats);
		System.out.println("enter how many passenger");
		total_passenger=sc.nextInt();
		if(total_seats>=total_passenger) {
			total_seats-=total_passenger;
			int i=0;
			while(i<total_passenger) {
				getcustomer_details();//fetching customer details
				i+=1;	
			}
			System.out.println("enter To city");
			to=sc.next();
			System.out.println("enter From City");
			from=sc.next();
			System.out.println("enter Arrival date");
			arrival_date=sc.next();
			to.equalsIgnoreCase(to);
			from.equalsIgnoreCase(from);
			Collections.sort(a,new AirLinesByFromName());//sorting in entered flight names
			AirLinesBooking ar1=new AirLinesBooking(null,to,from,null,null,0.0);//seraching for flight
			int index=Collections.binarySearch(a,ar1,new AirLinesByFromName());
			if(index<0)
				System.out.println("palne is not availble");
			else
			{
				System.out.println("*****************print Ticket******************");
				System.out.println("plane name            :"+a.get(index).getPlane_name());
				System.out.println("customer_deatils        :"+cus.toString());
				System.out.println("City                  :"+a.get(index).getTo()+"  To  "+a.get(index).getFrom());
				System.out.println("number of passengers  :"+total_passenger);
				System.out.println("Date and time      	  :"+arrival_date+"  Time  :"+a.get(index).getArrival_time()+"   depTime   :"+a.get(index).getDeparture_time());
				total_amount=a.get(index).getTicket_price()*total_passenger;
				System.out.println("Toatalticket price    :"+total_amount);
			}
		}
		else {
			System.out.println("Seats are not available");
		}
		
	}

	@Override
	public void run() {
		try {
			getDetials();
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	@Override
	public void getcustomer_details() {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter customer name");
		String customer_name=sc.next();
		System.out.println("enter customer mobile number");
		long mobile_no=sc.nextLong();
		System.out.println("enter customer address");
		String address=sc.next();
		System.out.println("enter seat number");
		int seat_no=sc.nextInt();
		Collections.sort(cus,new SeatId());
		Customer cu=new Customer(null,0,null,seat_no);
		int index=Collections.binarySearch(cus,cu,new SeatId());
		if(index<0)
			cus.add(new Customer(customer_name,mobile_no,address,seat_no));
			
		else {
				System.out.println("seat already booked");
				System.out.println("please enter anthoer seat number");
				seat_no=sc.nextInt();
				cus.add(new Customer(customer_name,mobile_no,address,seat_no));
		}
	}
}
class AirLinesByFromName implements Comparator<AirLinesBooking>{

	@Override
	public int compare(AirLinesBooking o1, AirLinesBooking o2) {
		
		return o1.from.compareToIgnoreCase(o2.from);
	}
	
}
class SeatId implements Comparator<Customer>{

	@Override
	public int compare(Customer o1, Customer o2) {
		if(o1.seat_no<o2.seat_no)
			return -1;
		else if(o1.seat_no>o2.seat_no)
			return 1;
		else
			return 0;
	}
	
}